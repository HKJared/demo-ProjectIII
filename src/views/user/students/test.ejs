<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>C/C++ for Students</title>
    <link rel="stylesheet" href="/codemirror-5.65.12/lib/codemirror.css">
    <script src="/codemirror-5.65.12/lib/codemirror.js"></script>
    <script src="/codemirror-5.65.12/mode/python/python.js"></script>
    <script src="/codemirror-5.65.12/mode/clike/clike.js"></script>
    <link rel="stylesheet" href="/codemirror-5.65.12/theme/dracula.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/css/app.css">
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
    <link rel="shortcut icon" href="/image/logoWeb.png" type="image/png">


</head>
<body>
    <div class="topnav">
        <a class="active" href="/">Home</a>
        <a href="/student/<%= idUser %>/profile">Profile</a>
        <a href="/" onclick="let cf = confirm('Confirm Logout'); if (cf) handleLogout(); return cf">Logout</a>
    </div>
    <div class="w3-container">
        <div>
            <h1><%= detail.className %></h1>
            <div class="header-detail">
                <a href="/student/<%= idUser %>/detail-class/<%= detail.idClass %>">Exam</a>
                <a href="/student/<%= idUser %>/detail-class/<%= detail.idClass %>/members">Members</a>
                <a class="h-active">Test</a>
            </div>
            <div class="add">
                <button type="button" onclick="leaveClass();">Leave Class</button>
            </div>
            <h2><%= data.testName %></h2>
            <h3>Language Allow: <%= data.languageAllow %></h3>
            <div class="data-test">
                <textarea disabled name="exam" id="detailExam"></textarea>
                <div id="imageContainer"></div>
            </div>
        </div>
    </div>
    <div class="row m-3">
        <div class="col">
            <div class="d-flex justify-content-between mb-2 bg-dark rounded p-2">
                <div class="col-12 w-25">
                  <label class="visually-hidden" for="autoSizingSelect">Preference</label>
                  <select class="form-select" id="inlineFormSelectPref">
                      <option selected>Language</option>
                      <option value="Cpp">Cpp</option>
                      <option value="Java">Java</option>
                      <option value="Python">Python</option>
                  </select>
                </div>
                <div style="color: #fff;">
                    <label for="countdownTimer">Countdown Timer:</label>
                    <span id="countdownTimer"></span>
                    <button id="startButton" class="btn btn-success">Start</button>
                </div>
                <div>
                    <button type="button" id="sub" class="btn btn-success">Submit</button>
                    <button type="button" id="run" class="btn btn-success">Run <i class="bi bi-play-fill"></i></button>
                </div>
            </div>
            <textarea type="text" id="editor" class="form-control" aria-label="First name"></textarea>
        </div>
        <div class="col d-flex flex-column rounded bg-dark px-4">
          <div class="h-50">
            <label for="Input" class="text-light mt-4 mb-2">Input</label>
            <textarea type="text" id="input" class="form-control h-75" aria-label="Last name"></textarea>
          </div>
          <div class="h-50">
            <label for="Output" class="text-light mb-2">Output</label>
            <textarea type="text" id="output" class="form-control h-75" aria-label="Last name"></textarea>
          </div>
        </div>
      </div>
</body>
<script>
    async function leaveClass() {
      if (confirm('Confirm leave class')) {
        var req = await fetch("http://localhost:5000/leave-class", {
            method: "POST",
            headers: {
                "Content-type" : "application/json"
            },
            body: JSON.stringify({
                idUser: '<%= idUser %>',
                idClass: '<%= detail.idClass %>'
            })
        })

        var result = await req.json();
        if (result == "successfully leave class") {
            window.location = "http://localhost:5000/"
        } else {
            alert(result)
        }
      }
    }

    var editor=CodeMirror.fromTextArea(document.getElementById("editor"), {
        mode: "text/x-c++src",
        theme: "dracula",
        lineNumbers: true,
        autoCloseBracket: true,

    })
    var width=window.innerWidth
    var input = document.getElementById("input")
    var output = document.getElementById("output")
    var run = document.getElementById("run")
    var sub = document.getElementById("sub");
    editor.setSize(0.7*width, "500")
    var option=document.getElementById("inlineFormSelectPref")
    option?.addEventListener("change", function(){
      if(option.value == "Java"){
        editor.setOption("mode", "text/x-java")
      }
      else if(option.value == "Python"){
        editor.setOption("mode", "text/x-python")
      }
      else{
        editor.setOption("mode", "text/x-c++src")
      }
    })
    var code;
    var dataCode;

    async function submit() {
        await fetch("http://localhost:5000/submit", {
            method: "post",
            headers: {
                "Content-type": "application/json"
            },
            body: JSON.stringify({
                idUser: '<%= idUser %>',
                idClass: '<%= detail.idClass %>',
                code: editor.getValue(),
                lang: option.value
            })
        })
    
        // Xóa localStorage
        localStorage.removeItem('countdownDuration');
        localStorage.removeItem('countdownEndTime');
        localStorage.removeItem('detailTest');
        localStorage.removeItem('image');

        window.location = "http://localhost:5000/student/<%= idUser %>/detail-class/<%= detail.idClass %>"
    }

    let countdown;
    let durationInMinutes = Number('<%= data.duration %>'); // Giá trị đơn vị là phút
    let durationInMilliseconds = durationInMinutes * 60000; // Chuyển đổi thành mili giây
    let endTime;
    let detailTest;
    let image;

    document.getElementById('startButton').addEventListener('click', function() {
        startExam('<%= data.duration %>');
    });

    function handleLogout() {
        localStorage.removeItem('jwt')
        localStorage.removeItem('countdownDuration');
        localStorage.removeItem('countdownEndTime');
        localStorage.removeItem('detailTest');
        localStorage.removeItem('image');
    }
    

    async function startExam(duration) {
        try {
                // Gọi hàm để lấy dữ liệu từ máy chủ
                const data = await fetchDataFromServer('http://localhost:5000/student/test/get-data/<%= detail.idClass %>');
        
                // Lấy dữ liệu detailTest và image từ kết quả nhận được
                detailTest = data.testDetail;
                image = data.image;
        
                // Đặt giá trị detailTest vào textarea
                document.getElementById('detailExam').value = detailTest;
        
                // Hiển thị image
                displayImage(image);
        
                // Hiển thị .data-test
                document.querySelector('.data-test').classList.add('show')
        
                // Sử dụng endTime nếu nó đã được xác định từ trước
                let startTime = Date.now();
                endTime = endTime || startTime + durationInMilliseconds;
        
                function updateTimer() {
                    let currentTime = Date.now();
                    let remainingTime = endTime - currentTime;
        
                    if (remainingTime > 0) {
                        let minutes = Math.floor(remainingTime / 60000);
                        let seconds = Math.floor((remainingTime % 60000) / 1000);
                        document.getElementById('countdownTimer').textContent = `Time remaining: ${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
                    } else {
                        clearInterval(countdown);
                        document.getElementById('countdownTimer').textContent = 'Countdown expired';
                        submit();
                    }
                }
        
                // Cập nhật đồng hồ mỗi giây
                updateTimer();
                countdown = setInterval(updateTimer, 1000);
        
                // Lưu giá trị hiện tại khi cửa sổ đóng
                window.addEventListener('beforeunload', function () {
                    localStorage.setItem('countdownDuration', durationInMinutes);
                    localStorage.setItem('countdownEndTime', endTime);
                    localStorage.setItem('detailTest', detailTest); // Lưu giá trị detailTest
                    localStorage.setItem('image', image); // Lưu giá trị image
                });
        } catch (error) {
            console.error('Error starting exam:', error);
        }
    }
    
    // Khôi phục trạng thái khi tải lại trang
    window.addEventListener('load', function () {
        let storedDuration = localStorage.getItem('countdownDuration');
        let storedEndTime = localStorage.getItem('countdownEndTime');
        let storedDetailTest = localStorage.getItem('detailTest'); // Lấy giá trị detailTest
        let storedImage = localStorage.getItem('image'); // Lấy giá trị image

        if (storedDuration && storedDetailTest && storedImage) {
            durationInMinutes = parseInt(storedDuration, 10);
            durationInMilliseconds = durationInMinutes * 60000;
            endTime = storedEndTime || null;

            // Đặt giá trị detailTest vào textarea
            document.getElementById('detailExam').value = storedDetailTest;

            // Hiển thị image
            displayImage(storedImage);

            startExam(durationInMilliseconds);
        } else {
            // Nếu không có thông tin trong localStorage, ẩn .data-test
            document.querySelector('.data-test').style.display = 'none';
            localStorage.clear();
        }
    });

    // Hàm để lấy dữ liệu từ máy chủ
    async function fetchDataFromServer(url) {
        const response = await fetch(url, {
            method: 'GET', // Có thể thay đổi phương thức theo yêu cầu của bạn
            headers: {
                'Content-Type': 'application/json'
            },
            // Có thể thêm body nếu phương thức là POST hoặc PUT
        });

        if (!response.ok) {
            throw new Error(`Error fetching data from server. Status: ${response.status}`);
        }

        const data = await response.json();
        return data;
    }

    // Hàm để hiển thị image
    function displayImage(imageSource) {
        let imageContainer = document.getElementById('imageContainer');
        imageContainer.innerHTML = '';
        let imgElement = document.createElement('img');
        imgElement.src = imageSource;
        imageContainer.appendChild(imgElement);
    }

    run.addEventListener("click", async function(){
      code = {
        code: editor.getValue(),
        input: input.value,
        lang: option.value
      }

      var oData = await fetch("http://localhost:5000/compile", {
        method: "POST",
        headers:{
          "Content-Type": "application/json"
        },
        body:JSON.stringify(code)
      })
      var d = await oData.json()
      output.value = d.output
    })

    sub.addEventListener("click", async function(){
        if (confirm('Confirm submit')){
            submit();
        }
    })
</script>
</html>